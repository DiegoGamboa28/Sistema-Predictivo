Nacionalidad = as.factor(Nacionalidad),
Nacionalidad = as.factor(Nacionalidad),
Profesion = as.factor(Profesion),
Situacion = as.factor(Situacion),
PaisNacimiento = as.factor(PaisNacimiento),
ActEconEmpresa = as.factor(ActEconEmpresa),
PaisCuenta = as.factor(PaisCuenta)) %>%
extract(FechaOperacion, c("FechaOperacion.mes","FechaOperacion.dia"),
regex = "[[:digit:]]+-([[:digit:]]+)-([[:digit:]]+)") %>%
extract(FechaAperturaCuenta, c("FechaAperturaCuenta.dia","FechaAperturaCuenta.mes"),
regex="([[:digit:]]+)/([[:digit:]]+)/[[:digit:]]+") %>%
extract(FechaConstitucion, c("FechaConstitucion.mes","FechaConstitucion.dia"),
regex = "[[:digit:]]+-([[:digit:]]+)-([[:digit:]]+)") %>%
extract(FechaNacimiento, c("FechaNacimiento.mes","FechaNacimiento.dia"),
regex = "[[:digit:]]+-([[:digit:]]+)-([[:digit:]]+)") %>%
mutate(FechaOperacion.mes = as_factor(FechaOperacion.mes),
FechaOperacion.dia = as_factor(FechaOperacion.dia),
FechaAperturaCuenta.dia = as_factor(FechaAperturaCuenta.dia),
FechaAperturaCuenta.mes = as_factor(FechaAperturaCuenta.mes),
FechaConstitucion.mes = as_factor(FechaConstitucion.mes),
FechaConstitucion.dia = as_factor(FechaConstitucion.dia),
FechaNacimiento.dia = as_factor(FechaNacimiento.dia),
FechaNacimiento.mes = as_factor(FechaNacimiento.mes),
MontoFinal = case_when(Moneda == "COL" ~ MontoFinal/TipoCambio, T~MontoFinal)) %>%
select(-c(CodigoCRM,NumeroOperacion,IndPuestoExterno,  #EliminaciÃ³n de datos innecesarios
ClasePersona,IndResidenciaUSA,EmpesaFATCA,IndTransferUSA,
IndPoderUSA,FechaNacimiento.dia,FechaNacimiento.mes,
FechaAperturaCuenta.mes,FechaAperturaCuenta.dia,FechaConstitucion.mes,
FechaConstitucion.dia))
datos$MontoFinal
datos$MontoFinal %>%  min()
datos$MontoFinal %>% min()
datos$MontoFinal %>% max()
datos$MontoFinal %>% max() - min()
maximo <- datos$MontoFinal %>% max()
minimo <- datos$MontoFinal %>% max()
minimo <- datos$MontoFinal %>% min()
maximo - minimo
(maximo - minimo)5
(maximo - minimo) / 5
datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo"))
separador <- function(numero) {
minimo + numero*paso
}
datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo"))
maximo <- datos$MontoFinal %>% max()
minimo <- datos$MontoFinal %>% min()
paso <- (maximo - minimo)/5
separador <- function(numero) {
minimo + numero*paso
}
datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo"))
datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo")) %>% select(Clasificacion)
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo")) %>% select(Clasificacion)
table(p)
paso
maximo
paso/maximo
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
T~"NA"),) %>% select(Clasificacion)
p
table(p)
datos$MontoFinal
mean(datos$MontoFinal)
maximo-mean(datos$MontoFinal)
(maximo-mean(datos$MontoFinal) )/5
maximo <- datos$MontoFinal %>% max()
minimo <- datos$MontoFinal %>% min()
promedio <- datos$MontoFinal %>% mean()
paso <- (maximo - minimo)/5
separador <- function(numero) {
minimo + numero*paso
}
paso <- (maximo - promedio)/5
separador <- function(numero) {
minimo + numero*paso
}
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
T~"NA"),) %>% select(Clasificacion)
table(p)
numero*promedio
separador <- function(numero) {
numero*promedio
}
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
T~"NA"),) %>% select(Clasificacion)
table(p)
promedio <- datos$MontoFinal %>% mean() /5
promedio
separador <- function(numero) {
numero*promedio
}
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
T~"NA"),) %>% select(Clasificacion)
table(p)
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
separador(2) <= MontoFinal & MontoFinal < separador(3)~"medio",
separador(3) <= MontoFinal & MontoFinal < separador(4)~"alto",
separador(4) <= MontoFinal~"muy.alto",
T~"NA"),) %>% select(Clasificacion)
table(p)
promedio <- datos$MontoFinal %>% mean()
separador <- function(numero) {
numero*promedio
}
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
separador(2) <= MontoFinal & MontoFinal < separador(3)~"medio",
separador(3) <= MontoFinal & MontoFinal < separador(4)~"alto",
separador(4) <= MontoFinal~"muy.alto",
T~"NA"),) %>% select(Clasificacion)
table(p)
minimo <- datos$MontoFinal %>% min()
promedio <- datos$MontoFinal %>% mean()
paso <- (promedio - minimo)/5
separador <- function(numero) {
minimo + numero*paso
}
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
separador(2) <= MontoFinal & MontoFinal < separador(3)~"medio",
separador(3) <= MontoFinal & MontoFinal < separador(4)~"alto",
separador(4) <= MontoFinal~"muy.alto",
T~"NA"),) %>% select(Clasificacion)
table(p)
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
separador(2) <= MontoFinal & MontoFinal < separador(3)~"medio",
separador(3) <= MontoFinal & MontoFinal < separador(4)~"alto",
separador(4) <= MontoFinal~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto")))
table(p$Clasificacion)
p$Clasificacion
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
separador(2) <= MontoFinal & MontoFinal < separador(3)~"medio",
separador(3) <= MontoFinal & MontoFinal < separador(4)~"alto",
separador(4) <= MontoFinal~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","NA")))
p$Clasificacion
minimo <- datos$MontoFinal %>% min()
promedio <- datos$MontoFinal %>% mean()
paso <- (promedio - minimo)/5
paso <- (promedio - minimo)/5
separador <- function(numero) {
minimo + numero*paso
}
p <- datos %>% mutate(Clasificacion = case_when(MontoFinal < separador(1)~"muy.bajo",
separador(1) <= MontoFinal & MontoFinal < separador(2)~"bajo",
separador(2) <= MontoFinal & MontoFinal < separador(3)~"medio",
separador(3) <= MontoFinal & MontoFinal < separador(4)~"alto",
separador(4) <= MontoFinal~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","NA")))
p$Clasificacion
p[,c("MontoFinal","Clasificacion")]
p <- datos %>% mutate(Clasificacion = case_when((MontoFinal < separador(1))~"muy.bajo",
(separador(1) <= MontoFinal & MontoFinal < separador(2))~"bajo",
(separador(2) <= MontoFinal & MontoFinal < separador(3))~"medio",
(separador(3) <= MontoFinal & MontoFinal < separador(4))~"alto",
(separador(4) <= MontoFinal)~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","NA")))
p[,c("MontoFinal","Clasificacion")]
separador(1)
p <- datos %>% mutate(Clasificacion = case_when((MontoFinal < separador(1))~"muy.bajo",
(separador(1) <= MontoFinal & MontoFinal < separador(2))~"bajo",
(separador(2) <= MontoFinal & MontoFinal < separador(3))~"medio",
(separador(3) <= MontoFinal & MontoFinal < separador(4))~"alto",
(separador(4) <= MontoFinal)~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","NA"))) %>% select(MontoFinal,Clasificacion)
p
p[6,1]
p[6,1] < separador(1)
p[6,1] >= separador(1)
p[6,1] < separador(2)
p[6,1] >= separador(2)
p[6,1] <= separador(3)
p[6,1] >= separador(3)
p[6,1] < separador(4)
separador(4)
p[6,1]
p[6,1] <= separador(4)
p[6,1] < separador(4)
separador(4)
p[6,1] - separador(4)
p[6,1] - separador(3)
p[6,1] - separador(2)
p[6,1] - separador(1)
p[6,1] - separador(5)
p[6,1] - separador(6)
p[6,1] > separador(6)
p <- datos %>% mutate(Clasificacion = case_when((MontoFinal < separador(1))~"muy.bajo",
(separador(1) <= MontoFinal & MontoFinal < separador(2))~"bajo",
(separador(2) <= MontoFinal & MontoFinal < separador(3))~"medio",
(separador(3) <= MontoFinal & MontoFinal < separador(4))~"alto",
(separador(4) >= MontoFinal)~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","NA"))) %>% select(MontoFinal,Clasificacion)
p[,c("MontoFinal","Clasificacion")]
p <- datos %>% mutate(Clasificacion = case_when((MontoFinal < separador(1))~"muy.bajo",
(separador(1) <= MontoFinal & MontoFinal < separador(2))~"bajo",
(separador(2) <= MontoFinal & MontoFinal < separador(3))~"medio",
(separador(3) <= MontoFinal & MontoFinal < separador(4))~"alto",
(separador(4) >= MontoFinal)~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","muy.alto"))) %>% select(MontoFinal,Clasificacion)
p[,c("MontoFinal","Clasificacion")]
p <- datos %>% mutate(Clasificacion = case_when((MontoFinal < separador(1))~"muy.bajo",
(separador(1) <= MontoFinal & MontoFinal < separador(2))~"bajo",
(separador(2) <= MontoFinal & MontoFinal < separador(3))~"medio",
(separador(3) <= MontoFinal & MontoFinal < separador(4))~"alto",
(separador(4) >= MontoFinal)~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","muy.alto","NA"))) %>% select(MontoFinal,Clasificacion)
p[,c("MontoFinal","Clasificacion")]
p[6,1]
(p[6,1] < separador(1))
(separador(1) <= p[6,1] & p[6,1] < separador(2))
separador(1) <= p[6,1]
p[6,1] < separador(2)
separador(2) <= p[6,1]
p[6,1] < separador(3)
(separador(2) <= p[6,1] & p[6,1] < separador(3))
(separador(3) <= p[6,1] & p[6,1] < separador(4))
separador(3) <= p[6,1]
p[6,1] < separador(4)
p[6,1] < separador(4)
p[6,1] < separador(4)
separador(3) <= p[6,1]
(separador(4) <= p[6,1])
p <- datos %>% mutate(Clasificacion = case_when((MontoFinal < separador(1))~"muy.bajo",
(separador(1) <= MontoFinal & MontoFinal < separador(2))~"bajo",
(separador(2) <= MontoFinal & MontoFinal < separador(3))~"medio",
(separador(3) <= MontoFinal & MontoFinal < separador(4))~"alto",
(separador(4) <= MontoFinal)~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","muy.alto","NA"))) %>% select(MontoFinal,Clasificacion)
p[,c("MontoFinal","Clasificacion")]
summary(p)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.align = "center")
knitr::opts_knit$set(root.dir = "../../Datos")
options(scipen = 999)
library(tidyverse)
library(RSDAPlus)
library(RColorBrewer)
as_factor <- function(x) factor(replace(x,is.na(x),"no.aplica"),ordered = T)
datos <- read_delim("total.csv",",",escape_double = FALSE,locale = locale(encoding = "latin1"),
trim_ws = TRUE, col_types = cols(CantidadNegociada = col_double(),
MontoIngDol = col_double(),
MontoEgrDol = col_double(),
MontoInvertirDol = col_double())) %>%
mutate_if(is.character,funs(as.factor)) %>%
mutate(CuentaCliente = as.factor(CuentaCliente),
PaisCuenta = replace(PaisCuenta,is.na(PaisCuenta),188),
NivelEducacion = factor(NivelEducacion, levels = c("B","D","L","M","O","P","S")),
IndicadorPEP = factor(IndicadorPEP, levels = c("N", "D", "V")),
IndTransferUSA = factor(IndTransferUSA, levels = c("N","S")),
IndPoderUSA = factor(IndPoderUSA, levels = c("N","S")),
ManejaFondosTerceros = factor(ManejaFondosTerceros, levels = c("N","S")),
IndResidenciaUSA = factor(IndResidenciaUSA, levels = c("N","S")),
IndFuncionario = factor(IndFuncionario, levels = c("N","S")),
IndCustodioExterno = factor(IndCustodioExterno, levels = c("N","S")),
IndPuestoExterno = factor(IndPuestoExterno, levels = c("N","S")),
IndLiqExterno = factor(IndLiqExterno, levels = c("N","S")),
EmpesaFATCA = factor(EmpesaFATCA, levels = c("N","S")),
ResidenciaUSA = factor(ResidenciaUSA, levels = c("N","S")),
PersonaFATCA = factor(PersonaFATCA, levels = c("N","S")),
Nacionalidad = as.factor(Nacionalidad),
Nacionalidad = as.factor(Nacionalidad),
Profesion = as.factor(Profesion),
Situacion = as.factor(Situacion),
PaisNacimiento = as.factor(PaisNacimiento),
ActEconEmpresa = as.factor(ActEconEmpresa),
PaisCuenta = as.factor(PaisCuenta)) %>%
extract(FechaOperacion, c("FechaOperacion.mes","FechaOperacion.dia"),
regex = "[[:digit:]]+-([[:digit:]]+)-([[:digit:]]+)") %>%
extract(FechaAperturaCuenta, c("FechaAperturaCuenta.dia","FechaAperturaCuenta.mes"),
regex="([[:digit:]]+)/([[:digit:]]+)/[[:digit:]]+") %>%
extract(FechaConstitucion, c("FechaConstitucion.mes","FechaConstitucion.dia"),
regex = "[[:digit:]]+-([[:digit:]]+)-([[:digit:]]+)") %>%
extract(FechaNacimiento, c("FechaNacimiento.mes","FechaNacimiento.dia"),
regex = "[[:digit:]]+-([[:digit:]]+)-([[:digit:]]+)") %>%
mutate(FechaOperacion.mes = as_factor(FechaOperacion.mes),
FechaOperacion.dia = as_factor(FechaOperacion.dia),
FechaAperturaCuenta.dia = as_factor(FechaAperturaCuenta.dia),
FechaAperturaCuenta.mes = as_factor(FechaAperturaCuenta.mes),
FechaConstitucion.mes = as_factor(FechaConstitucion.mes),
FechaConstitucion.dia = as_factor(FechaConstitucion.dia),
FechaNacimiento.dia = as_factor(FechaNacimiento.dia),
FechaNacimiento.mes = as_factor(FechaNacimiento.mes),
MontoFinal = case_when(Moneda == "COL" ~ MontoFinal/TipoCambio, T~MontoFinal)) %>%
select(-c(CodigoCRM,NumeroOperacion,IndPuestoExterno,  #EliminaciÃ³n de datos innecesarios
ClasePersona,IndResidenciaUSA,EmpesaFATCA,IndTransferUSA,
IndPoderUSA,FechaNacimiento.dia,FechaNacimiento.mes,
FechaAperturaCuenta.mes,FechaAperturaCuenta.dia,FechaConstitucion.mes,
FechaConstitucion.dia))
minimo <- datos$MontoFinal %>% min()
promedio <- datos$MontoFinal %>% mean()
paso <- (promedio - minimo)/5
separador <- function(numero) {
minimo + numero*paso
}
datos <- datos %>%
mutate(Clasificacion = case_when((MontoFinal < separador(1))~"muy.bajo",
(separador(1) <= MontoFinal & MontoFinal < separador(2))~"bajo",
(separador(2) <= MontoFinal & MontoFinal < separador(3))~"medio",
(separador(3) <= MontoFinal & MontoFinal < separador(4))~"alto",
(separador(4) <= MontoFinal)~"muy.alto",
T~"NA")) %>%
mutate(Clasificacion =  factor(Clasificacion,levels = c("muy.bajo","bajo","medio","alto","muy.alto")))
juridicos <- datos %>% filter(TipoCliente == "J") %>% select_if(~sum(. != 0 & !is.na(.)>0)>0)
juridicos.numericos <- juridicos %>% select_if(~sum(!is.factor(.))>0)
juridicos <- juridicos[, -which(names(juridicos) %in% c("TipoCliente"))]
fisicos <- datos %>% filter(TipoCliente != "J") %>% select_if(~sum(. != 0 & !is.na(.)>0)>0)
fisicos.numericos <- fisicos %>% select_if(~sum(!is.factor(.))>0)
fisicos <- fisicos[, -which(names(fisicos) %in% c("TipoCliente"))]
atipicos <- list()
for(i in 1:dim(juridicos.numericos)[2]){
out <- boxplot(na.omit(juridicos.numericos[,i]),plot = F,na.action = na.pass)$out
if(length(out) > 0){
atipicos[[names(juridicos.numericos)[i]]] <- out
}
}
nombres <- c("MontoNegociado","CantidadNegociada","MontoFinal")
for(key in nombres){
valores <- unique(atipicos[[key]])
for(v in valores){
cond <- !(datos[,key] == v & datos$TipoCliente == "J")
cond[is.na(cond)] <- TRUE
datos <- datos[cond,]
}
}
paste0("Filas: ", nrow(datos) , "  Columnas: ",ncol(datos))
atipicos <- list()
for(i in 1:dim(fisicos.numericos)[2]){
out <- boxplot(na.omit(fisicos.numericos[,i]),plot = F,na.action = na.pass)$out
if(length(out) > 0){
atipicos[[names(fisicos.numericos)[i]]] <- out
}
}
nombres <- c("MontoNegociado","CantidadNegociada","MontoFinal")
for(key in nombres){
valores <- unique(atipicos[[key]])
for(v in valores){
cond <- !(datos[,key] == v & datos$TipoCliente == "F")
cond[is.na(cond)] <- TRUE
datos <- datos[cond,]
}
}
paste0("Filas: ", nrow(datos) , "  Columnas: ",ncol(datos))
options(digits = 20)
SD <- function(x){
x <- sd(x)
if(is.na(x)) 0 else x
}
MEAN <- mean
generar.perfil <- function(x){
bins <- ifelse(nrow(x) == 1, 1, NA_integer_)
respuesta <- classic.to.sym(x, concept=c('CuentaCliente'),
col.names = c(Clasificacion, MontoFinal,Moneda,FechaOperacion.dia, FechaOperacion.mes),
col.types = c(Clasificacion =  type.modal(),
MontoFinal = type.interval(),
MontoFinal = type.continuous(.fun = "MEAN"),
MontoFinal = type.continuous(.fun = "SD"),
Moneda =  type.modal(),
FechaOperacion.dia =  type.modal(),
FechaOperacion.mes =  type.modal()))
return(respuesta)
}
lista <- datos %>% group_by(CuentaCliente) %>%
do(vals=data.frame(.))  %>%
select(vals) %>%
lapply(function(x) {(x)})
lista <- lista[[1]]
perfiles <- lapply(lista, generar.perfil)
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
result <- perfiles[[2]]
plot(result[1,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
result <- perfiles[[50]]
plot(result,col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
result <- perfiles[[50]]
plot(result,col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
result <- perfiles[[100]]
plot(result,col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
perfiles[[100]]
do.call("rbind",perfiles)
p <- do.call("rbind",perfiles)
p[,1]
plot(p[1:4,])
plot(p[1:4,],reduce =T)
plot(p[2:5,],reduce =T)
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
perfiles <- do.call("rbind", perfiles)
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
plot(perfiles[50,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[100,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[100,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
perfiles$sym.var.names
x1 <- perfiles[2:5,]
x1$sym.obj.names
x1$sym.obj.names
datos %>% filter(CuentaCliente)
datos %>% select(CuentaCliente)
datos %>% select(CuentaCliente == "1")
datos %>% select(CuentaCliente == "2")
datos %>% filter(CuentaCliente == "2")
datos %>% filter(CuentaCliente == "1")
respuesta <- classic.to.sym(datos, concept=c('CuentaCliente'),
col.names = c(Clasificacion, MontoFinal,Moneda,FechaOperacion.dia, FechaOperacion.mes),
col.types = c(Clasificacion =  type.modal(),
MontoFinal = type.interval(),
MontoFinal = type.continuous(.fun = "MEAN"),
MontoFinal = type.continuous(.fun = "SD"),
Moneda =  type.modal(),
FechaOperacion.dia =  type.modal(),
FechaOperacion.mes =  type.modal()))
respuesta
perfiles <- classic.to.sym(datos, concept=c('CuentaCliente'),
col.names = c(Clasificacion, MontoFinal,Moneda,FechaOperacion.dia, FechaOperacion.mes),
col.types = c(Clasificacion =  type.modal(),
MontoFinal = type.interval(),
MontoFinal = type.continuous(.fun = "MEAN"),
MontoFinal = type.continuous(.fun = "SD"),
Moneda =  type.modal(),
FechaOperacion.dia =  type.modal(),
FechaOperacion.mes =  type.modal()))
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
w <- c(1,#Clasificacion
1,#MontoFinal
1,#MontoFinal_MEAN
0,#MontoFinal_SD
1,#Moneda
1 #FechaOperacion.dia
)
x1 <- perfiles[2:5,]
datos1 <- datos %>% filter(CuentaCliente %in% x1$sym.obj.names)
respuesta <- add.maxdist(datos1, x1, w)
perfiles$sym.var.names
w <- c(1,#Clasificacion
1,#MontoFinal
1,#MontoFinal_MEAN
0,#MontoFinal_SD
1,#Moneda
1,#FechaOperacion.dia
1 #FechaOperacion.mes
)
x1 <- perfiles[2:5,]
datos1 <- datos %>% filter(CuentaCliente %in% x1$sym.obj.names)
respuesta <- add.maxdist(datos1, x1, w)
respuesta <- respuesta[1:4,]
respuesta$distmax
datos2 <- datos %>% filter(!(CuentaCliente %in% x1$sym.obj.names))
muestra <- sample(1:nrow(datos2),50)
datos2 <- datos2[muestra,]
for (i in seq(1,nrow(datos2),10)) {
datos2$CuentaCliente[i:(i+9)] <- x1$sym.obj.names[(i+9)/10]
}
datos2
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
for(i in 1:(respuesta$N)){
perfil <- respuesta[i,]
print(paste0("************************************ NÂª",i," ***********************************"))
print(paste0("Evaluando perfil de :",perfil$sym.obj.names," Dist.Max = ",perfil$distmax))
plot(perfil, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
df <- datos2 %>% filter(CUSTOMER_ID == perfil$sym.obj.names)
for (j in 1:nrow(df)){
falso <- convert.to.sym(perfil,df[j,])
dis.fal <-  as.numeric(symbolic.dist.matrix(rbind(perfil,falso),w = w)$m)
print(paste0("Distancia del perfil falso NÂª",j," = ",dis.fal," | ",perfil$distmax," < ",dis.fal," = ",perfil$distmax < dis.fal))
plot(falso, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
}
}
for(i in 1:(respuesta$N)){
perfil <- respuesta[i,]
print(paste0("************************************ NÂª",i," ***********************************"))
print(paste0("Evaluando perfil de :",perfil$sym.obj.names," Dist.Max = ",perfil$distmax))
plot(perfil, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
df <- datos2 %>% filter(CuentaCliente == perfil$sym.obj.names)
for (j in 1:nrow(df)){
falso <- convert.to.sym(perfil,df[j,])
dis.fal <-  as.numeric(symbolic.dist.matrix(rbind(perfil,falso),w = w)$m)
print(paste0("Distancia del perfil falso NÂª",j," = ",dis.fal," | ",perfil$distmax," < ",dis.fal," = ",perfil$distmax < dis.fal))
plot(falso, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
}
}
2*2
3*3
2*3
2*4
shiny::runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
