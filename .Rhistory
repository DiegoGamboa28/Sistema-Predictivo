if(length(out) > 0){
atipicos[[names(fisicos.numericos)[i]]] <- out
}
}
nombres <- c("MontoNegociado","CantidadNegociada","MontoFinal")
for(key in nombres){
valores <- unique(atipicos[[key]])
for(v in valores){
cond <- !(datos[,key] == v & datos$TipoCliente == "F")
cond[is.na(cond)] <- TRUE
datos <- datos[cond,]
}
}
paste0("Filas: ", nrow(datos) , "  Columnas: ",ncol(datos))
options(digits = 20)
SD <- function(x){
x <- sd(x)
if(is.na(x)) 0 else x
}
MEAN <- mean
generar.perfil <- function(x){
bins <- ifelse(nrow(x) == 1, 1, NA_integer_)
respuesta <- classic.to.sym(x, concept=c('CuentaCliente'),
col.names = c(Clasificacion, MontoFinal,Moneda,FechaOperacion.dia, FechaOperacion.mes),
col.types = c(Clasificacion =  type.modal(),
MontoFinal = type.interval(),
MontoFinal = type.continuous(.fun = "MEAN"),
MontoFinal = type.continuous(.fun = "SD"),
Moneda =  type.modal(),
FechaOperacion.dia =  type.modal(),
FechaOperacion.mes =  type.modal()))
return(respuesta)
}
lista <- datos %>% group_by(CuentaCliente) %>%
do(vals=data.frame(.))  %>%
select(vals) %>%
lapply(function(x) {(x)})
lista <- lista[[1]]
perfiles <- lapply(lista, generar.perfil)
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
result <- perfiles[[2]]
plot(result[1,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
result <- perfiles[[50]]
plot(result,col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
result <- perfiles[[50]]
plot(result,col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
result <- perfiles[[100]]
plot(result,col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
perfiles[[100]]
do.call("rbind",perfiles)
p <- do.call("rbind",perfiles)
p[,1]
plot(p[1:4,])
plot(p[1:4,],reduce =T)
plot(p[2:5,],reduce =T)
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
perfiles <- do.call("rbind", perfiles)
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
plot(perfiles[50,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[100,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[100,],col = colores, font.size = 1.9, size = 1.3, reduce=T,matrix.form = c(3,3),hist.angle.x = -90)
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
perfiles$sym.var.names
x1 <- perfiles[2:5,]
x1$sym.obj.names
x1$sym.obj.names
datos %>% filter(CuentaCliente)
datos %>% select(CuentaCliente)
datos %>% select(CuentaCliente == "1")
datos %>% select(CuentaCliente == "2")
datos %>% filter(CuentaCliente == "2")
datos %>% filter(CuentaCliente == "1")
respuesta <- classic.to.sym(datos, concept=c('CuentaCliente'),
col.names = c(Clasificacion, MontoFinal,Moneda,FechaOperacion.dia, FechaOperacion.mes),
col.types = c(Clasificacion =  type.modal(),
MontoFinal = type.interval(),
MontoFinal = type.continuous(.fun = "MEAN"),
MontoFinal = type.continuous(.fun = "SD"),
Moneda =  type.modal(),
FechaOperacion.dia =  type.modal(),
FechaOperacion.mes =  type.modal()))
respuesta
perfiles <- classic.to.sym(datos, concept=c('CuentaCliente'),
col.names = c(Clasificacion, MontoFinal,Moneda,FechaOperacion.dia, FechaOperacion.mes),
col.types = c(Clasificacion =  type.modal(),
MontoFinal = type.interval(),
MontoFinal = type.continuous(.fun = "MEAN"),
MontoFinal = type.continuous(.fun = "SD"),
Moneda =  type.modal(),
FechaOperacion.dia =  type.modal(),
FechaOperacion.mes =  type.modal()))
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
plot(perfiles[2:5,],col = colores, font.size = 1.9, size = 1.3, reduce=T,hist.angle.x = -90)
w <- c(1,#Clasificacion
1,#MontoFinal
1,#MontoFinal_MEAN
0,#MontoFinal_SD
1,#Moneda
1 #FechaOperacion.dia
)
x1 <- perfiles[2:5,]
datos1 <- datos %>% filter(CuentaCliente %in% x1$sym.obj.names)
respuesta <- add.maxdist(datos1, x1, w)
perfiles$sym.var.names
w <- c(1,#Clasificacion
1,#MontoFinal
1,#MontoFinal_MEAN
0,#MontoFinal_SD
1,#Moneda
1,#FechaOperacion.dia
1 #FechaOperacion.mes
)
x1 <- perfiles[2:5,]
datos1 <- datos %>% filter(CuentaCliente %in% x1$sym.obj.names)
respuesta <- add.maxdist(datos1, x1, w)
respuesta <- respuesta[1:4,]
respuesta$distmax
datos2 <- datos %>% filter(!(CuentaCliente %in% x1$sym.obj.names))
muestra <- sample(1:nrow(datos2),50)
datos2 <- datos2[muestra,]
for (i in seq(1,nrow(datos2),10)) {
datos2$CuentaCliente[i:(i+9)] <- x1$sym.obj.names[(i+9)/10]
}
datos2
colores <- c(brewer.pal(11, "Spectral"),brewer.pal(12, "Set3"),brewer.pal(9, "Set1"), rainbow(25))
for(i in 1:(respuesta$N)){
perfil <- respuesta[i,]
print(paste0("************************************ Nª",i," ***********************************"))
print(paste0("Evaluando perfil de :",perfil$sym.obj.names," Dist.Max = ",perfil$distmax))
plot(perfil, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
df <- datos2 %>% filter(CUSTOMER_ID == perfil$sym.obj.names)
for (j in 1:nrow(df)){
falso <- convert.to.sym(perfil,df[j,])
dis.fal <-  as.numeric(symbolic.dist.matrix(rbind(perfil,falso),w = w)$m)
print(paste0("Distancia del perfil falso Nª",j," = ",dis.fal," | ",perfil$distmax," < ",dis.fal," = ",perfil$distmax < dis.fal))
plot(falso, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
}
}
for(i in 1:(respuesta$N)){
perfil <- respuesta[i,]
print(paste0("************************************ Nª",i," ***********************************"))
print(paste0("Evaluando perfil de :",perfil$sym.obj.names," Dist.Max = ",perfil$distmax))
plot(perfil, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
df <- datos2 %>% filter(CuentaCliente == perfil$sym.obj.names)
for (j in 1:nrow(df)){
falso <- convert.to.sym(perfil,df[j,])
dis.fal <-  as.numeric(symbolic.dist.matrix(rbind(perfil,falso),w = w)$m)
print(paste0("Distancia del perfil falso Nª",j," = ",dis.fal," | ",perfil$distmax," < ",dis.fal," = ",perfil$distmax < dis.fal))
plot(falso, matrix.form = c(4,5), reduce = T, size=1.3, font.size = 1.5, col = colores)
}
}
2*2
3*3
2*3
2*4
shiny::runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
?table
shiny::runApp('inst/application')
runApp('inst/application')
modelo.knn <<- train.kknn(Species~., data = iris, scale =T)
prediccion.knn <<- predict(modelo.knn, iris)
MC.knn <<- table(iris$Species, prediccion.knn)
MC.knn
plot.MC <<- function(cm){
par(mar=c(2,2,2,2))
plot(c(1, 600), c(-100, 500), type = 'n', xlab='', ylab='', xaxt='n', yaxt='n')
title('Matriz de Confusión', cex.main=2)
start <- 70
len <- 500 - start
n.class <- ncol(cm) + 2
names.class <- c(colnames(cm),'Precisión', 'Error')
prec.cat <- diag(cm)/rowSums(cm)
error.cat <- 1 - prec.cat
ancho <- len / n.class
alto  <- len / (n.class-2)
x2 <- (x1 <- start) + ancho
y2 <- (y1 <- len) - alto
text(310, 485, 'Predición', cex=1.3, font=2)
text(start-55, 250, 'Real', cex=1.3, srt=90, font=2)
for (i in 0:(n.class-3)) {
for (j in 0:(n.class-1)) {
x1.aux <- x1 + j*(ancho + 3)
y1.aux <- y1 - i*(alto + 5)
x2.aux <- x2 + j*(ancho + 3)
y2.aux <- y2 - i*(alto + 5)
if(j < (n.class-2)){
rect(x1.aux, y1.aux, x2.aux, y2.aux, col=ifelse(i==j,'#3f72af','#11999e'))
text(mean(c(x1.aux,x2.aux)) , mean(c(y1.aux,y2.aux)), cm[(i+1),(j+1)], cex=1.3, font=2, col='white')
}
if (j == (n.class-2)){
rect(x1.aux, y1.aux, x2.aux, y2.aux, col= '#e4f9f5' )
text(mean(c(x1.aux,x2.aux)) , mean(c(y1.aux,y2.aux)), paste0(round(prec.cat[i+1] * 100,2), '%'), cex=1.3, font=2, col='black')
}
if (j == (n.class-1)){
rect(x1.aux, y1.aux, x2.aux, y2.aux, col= '#e4f9f5' )
text(mean(c(x1.aux,x2.aux)) , mean(c(y1.aux,y2.aux)), paste0(round(error.cat[i+1] * 100,2), '%'), cex=1.3, font=2, col='black')
}
}
text( mean( c((x2 + i*(ancho + 3)) , (x1 + i*(ancho + 3)) )), y1 + 20, names.class[i+1], cex=1.2)
text( x1-20,mean(c((y1 - i*(alto + 5)) , (y2 - i*(alto + 5))  )), names.class[i+1], cex=1.2)
}
text( mean( c((x2 + (i+1)*(ancho + 3)) , (x1 + (i+1)*(ancho + 3)) )), y1 + 20, names.class[i+2], cex=1.2)
text( mean( c((x2 + (i+2)*(ancho + 3)) , (x1 + (i+2)*(ancho + 3)) )), y1 + 20, names.class[i+3], cex=1.2)
text( mean( c((x2 + (i+3)*(ancho + 3)) , (x1 + (i+3)*(ancho + 3)) )), y1 + 20, names.class[i+4], cex=1.2)
}
plot.MC(MC.knn)
plot.MC <<- function(cm){
par(mar=c(2,2,2,2))
plot(c(1, 600), c(-100, 500), type = 'n', xlab='', ylab='', xaxt='n', yaxt='n')
title('Matriz de Confusión', cex.main=2)
start <- 70
len <- 500 - start
n.class <- ncol(cm)
names.class <- colnames(cm)
prec.cat <- diag(cm)/rowSums(cm)
error.cat <- 1 - prec.cat
ancho <- len / n.class
alto  <- len / (n.class)
x2 <- (x1 <- start) + ancho
y2 <- (y1 <- len) - alto
text(310, 485, 'Predición', cex=1.3, font=2)
text(start-55, 250, 'Real', cex=1.3, srt=90, font=2)
for (i in 0:(n.class-1)) {
for (j in 0:(n.class-1)) {
x1.aux <- x1 + j*(ancho + 3)
y1.aux <- y1 - i*(alto + 5)
x2.aux <- x2 + j*(ancho + 3)
y2.aux <- y2 - i*(alto + 5)
if(j < (n.class-2)){
rect(x1.aux, y1.aux, x2.aux, y2.aux, col=ifelse(i==j,'#3f72af','#11999e'))
text(mean(c(x1.aux,x2.aux)) , mean(c(y1.aux,y2.aux)), cm[(i+1),(j+1)], cex=1.3, font=2, col='white')
}
}
text( mean( c((x2 + i*(ancho + 3)) , (x1 + i*(ancho + 3)) )), y1 + 20, names.class[i+1], cex=1.2)
text( x1-20,mean(c((y1 - i*(alto + 5)) , (y2 - i*(alto + 5))  )), names.class[i+1], cex=1.2)
}
text( mean( c((x2 + (i+1)*(ancho + 3)) , (x1 + (i+1)*(ancho + 3)) )), y1 + 20, names.class[i+2], cex=1.2)
text( mean( c((x2 + (i+2)*(ancho + 3)) , (x1 + (i+2)*(ancho + 3)) )), y1 + 20, names.class[i+3], cex=1.2)
text( mean( c((x2 + (i+3)*(ancho + 3)) , (x1 + (i+3)*(ancho + 3)) )), y1 + 20, names.class[i+4], cex=1.2)
}
plot.MC(MC.knn)
plot.MC <<- function(cm){
par(mar=c(2,2,2,2))
plot(c(1, 600), c(-100, 500), type = 'n', xlab='', ylab='', xaxt='n', yaxt='n')
title('Matriz de Confusión', cex.main=2)
start <- 70
len <- 500 - start
n.class <- ncol(cm)
names.class <- colnames(cm)
prec.cat <- diag(cm)/rowSums(cm)
error.cat <- 1 - prec.cat
ancho <- len / n.class
alto  <- len / (n.class)
x2 <- (x1 <- start) + ancho
y2 <- (y1 <- len) - alto
text(310, 485, 'Predición', cex=1.3, font=2)
text(start-55, 250, 'Real', cex=1.3, srt=90, font=2)
for (i in 0:(n.class-1)) {
for (j in 0:(n.class-1)) {
x1.aux <- x1 + j*(ancho + 3)
y1.aux <- y1 - i*(alto + 5)
x2.aux <- x2 + j*(ancho + 3)
y2.aux <- y2 - i*(alto + 5)
if(j < (n.class)){
rect(x1.aux, y1.aux, x2.aux, y2.aux, col=ifelse(i==j,'#3f72af','#11999e'))
text(mean(c(x1.aux,x2.aux)) , mean(c(y1.aux,y2.aux)), cm[(i+1),(j+1)], cex=1.3, font=2, col='white')
}
}
text( mean( c((x2 + i*(ancho + 3)) , (x1 + i*(ancho + 3)) )), y1 + 20, names.class[i+1], cex=1.2)
text( x1-20,mean(c((y1 - i*(alto + 5)) , (y2 - i*(alto + 5))  )), names.class[i+1], cex=1.2)
}
text( mean( c((x2 + (i+1)*(ancho + 3)) , (x1 + (i+1)*(ancho + 3)) )), y1 + 20, names.class[i+2], cex=1.2)
text( mean( c((x2 + (i+2)*(ancho + 3)) , (x1 + (i+2)*(ancho + 3)) )), y1 + 20, names.class[i+3], cex=1.2)
text( mean( c((x2 + (i+3)*(ancho + 3)) , (x1 + (i+3)*(ancho + 3)) )), y1 + 20, names.class[i+4], cex=1.2)
}
plot.MC(MC.knn)
plot.MC <<- function(cm){
par(mar=c(2,2,2,2))
plot(c(1, 600), c(-100, 500), type = 'n', xlab='', ylab='', xaxt='n', yaxt='n')
title('Matriz de Confusión', cex.main=2)
start <- 75
len <- 500 - start
n.class <- ncol(cm)
names.class <- colnames(cm)
prec.cat <- diag(cm)/rowSums(cm)
error.cat <- 1 - prec.cat
ancho <- len / n.class
alto  <- len / (n.class)
x2 <- (x1 <- start) + ancho
y2 <- (y1 <- len) - alto
text(310, 485, 'Predición', cex=1.3, font=2)
text(start-55, 250, 'Real', cex=1.3, srt=90, font=2)
for (i in 0:(n.class-1)) {
for (j in 0:(n.class-1)) {
x1.aux <- x1 + j*(ancho + 3)
y1.aux <- y1 - i*(alto + 5)
x2.aux <- x2 + j*(ancho + 3)
y2.aux <- y2 - i*(alto + 5)
if(j < (n.class)){
rect(x1.aux, y1.aux, x2.aux, y2.aux, col=ifelse(i==j,'#3f72af','#11999e'))
text(mean(c(x1.aux,x2.aux)) , mean(c(y1.aux,y2.aux)), cm[(i+1),(j+1)], cex=1.3, font=2, col='white')
}
}
text( mean( c((x2 + i*(ancho + 3)) , (x1 + i*(ancho + 3)) )), y1 + 20, names.class[i+1], cex=1.2)
text( x1-20,mean(c((y1 - i*(alto + 5)) , (y2 - i*(alto + 5))  )), names.class[i+1], cex=1.2)
}
text( mean( c((x2 + (i+1)*(ancho + 3)) , (x1 + (i+1)*(ancho + 3)) )), y1 + 20, names.class[i+2], cex=1.2)
text( mean( c((x2 + (i+2)*(ancho + 3)) , (x1 + (i+2)*(ancho + 3)) )), y1 + 20, names.class[i+3], cex=1.2)
text( mean( c((x2 + (i+3)*(ancho + 3)) , (x1 + (i+3)*(ancho + 3)) )), y1 + 20, names.class[i+4], cex=1.2)
}
plot.MC(MC.knn)
plot.MC(MC.knn)
plot.MC <<- function(cm){
par(mar=c(2,2,2,2))
plot(c(1, 600), c(-100, 500), type = 'n', xlab='', ylab='', xaxt='n', yaxt='n')
title('Matriz de Confusión', cex.main=2)
start <- 80
len <- 500 - start
n.class <- ncol(cm)
names.class <- colnames(cm)
prec.cat <- diag(cm)/rowSums(cm)
error.cat <- 1 - prec.cat
ancho <- len / n.class
alto  <- len / (n.class)
x2 <- (x1 <- start) + ancho
y2 <- (y1 <- len) - alto
text(310, 485, 'Predición', cex=1.3, font=2)
text(start-55, 250, 'Real', cex=1.3, srt=90, font=2)
for (i in 0:(n.class-1)) {
for (j in 0:(n.class-1)) {
x1.aux <- x1 + j*(ancho + 3)
y1.aux <- y1 - i*(alto + 5)
x2.aux <- x2 + j*(ancho + 3)
y2.aux <- y2 - i*(alto + 5)
if(j < (n.class)){
rect(x1.aux, y1.aux, x2.aux, y2.aux, col=ifelse(i==j,'#3f72af','#11999e'))
text(mean(c(x1.aux,x2.aux)) , mean(c(y1.aux,y2.aux)), cm[(i+1),(j+1)], cex=1.3, font=2, col='white')
}
}
text( mean( c((x2 + i*(ancho + 3)) , (x1 + i*(ancho + 3)) )), y1 + 20, names.class[i+1], cex=1.2)
text( x1-20,mean(c((y1 - i*(alto + 5)) , (y2 - i*(alto + 5))  )), names.class[i+1], cex=1.2)
}
text( mean( c((x2 + (i+1)*(ancho + 3)) , (x1 + (i+1)*(ancho + 3)) )), y1 + 20, names.class[i+2], cex=1.2)
text( mean( c((x2 + (i+2)*(ancho + 3)) , (x1 + (i+2)*(ancho + 3)) )), y1 + 20, names.class[i+3], cex=1.2)
text( mean( c((x2 + (i+3)*(ancho + 3)) , (x1 + (i+3)*(ancho + 3)) )), y1 + 20, names.class[i+4], cex=1.2)
}
plot.MC(MC.knn)
runApp('inst/application')
runApp('inst/application')
df <- iris
as.numeric(df)
apply(df, 2, as.numeric)
df <- iris
df[1:4,] <- apply(df[,1:4], 2, as.numeric)
df[,1:4] <- apply(df[,1:4], 2, as.numeric)
d
df
runApp('inst/application')
shiny::runApp('inst/application')
library(h2o)
h2o.init()
install.packages("h2o")
install.packages("h2o")
install.packages("h2o")
?h2o.kmeans
library(h2o)
?h2o.kmeans
knitr::opts_chunk$set(echo = TRUE,comment=NA,warning = FALSE,fig.align = "center")
library(kableExtra)
library(h2o)
h2o.no_progress()  # Desactiva la barra de progreso de h2o
h2o.init()
install.packages("matching")
install.packages("matching")
shiny::runApp('inst/application')
runApp('inst/application')
cod.poder.num
runApp('inst/application')
isolate(eval(parse(text = cod.poder.num)))
cod.poder.num
parse(text = cod.poder.num)
eval(parse(text = cod.poder.num))
cod.poder.num
runApp('inst/application')
cod.poder.num
cod.poder.num
parse(text = cod.poder.num)
isolate(eval(parse(text = cod.poder.num)))
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
PROMIDAT.EXPLORATORIO.SHINY:::init_shiny_exploratorio()
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
sqrt(462)
round(sqrt(462))
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
parse(text = "var.numericas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select = sapply(data, class) %in% c('numeric', 'integer''))
return(res)
}
var.categoricas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select =! sapply(data, class) %in% c('numeric', 'integer'))
return(res)
}
datos.disyuntivos <- function(data, vars) {
if (is.null(data)) return(NULL)
cualitativas <- base::subset(data, select = colnames(data) %in% c(vars))
data <- data[, !colnames(data) %in% vars]
for (variable in colnames(cualitativas)) {
for (categoria in unique(cualitativas[, variable])) {
nueva.var <- as.numeric(cualitativas[, variable] == categoria)
data <- cbind(data, nueva.var)
colnames(data)[length(colnames(data))] <- paste0(variable, '.', categoria)
}
}
return(data)
}
")
parse(text = "var.numericas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select = sapply(data, class) %in% c('numeric', 'integer''))
return(res)
}
var.categoricas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select =! sapply(data, class) %in% c('numeric', 'integer'))
return(res)
}
")
parse(text = "
var.categoricas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select =! sapply(data, class) %in% c('numeric', 'integer'))
return(res)
}
")
parse(text = "var.numericas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select = sapply(data, class) %in% c('numeric', 'integer''))
return(res)
}
")
parse(text = "var.numericas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select == sapply(data, class) %in% c('numeric', 'integer''))
return(res)
}
")
parse(text = "var.numericas <- function(data) {
if(is.null(data)) return(NULL)
res <- base::subset(data, select = sapply(data, class) %in% c('numeric', 'integer'))
return(res)
}
")
runApp('inst/application')
runApp('inst/application')
?icons
?icon
runApp('inst/application')
runApp('inst/application')
?rmarkdown::word_document()
shiny::runApp('inst/application')
runApp('inst/application')
devtools::session_info("rmarkdown")
as.list(devtools::session_info("rmarkdown"))
a <- as.list(devtools::session_info("rmarkdown"))
a
class(a)
class(a$platform
)
a$platform
a$platform$collate
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
getOption("encoding")
runApp('inst/application')
Sys.getlocale("LC_CTYPE")
Sys.getlocale("LC_CTYPE")
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
rmarkdown::render
enumerate_output_formats
rmarkdown::enumerate_output_formats
rmarkdown:::enumerate_output_formats
rmarkdown:::read_lines_utf8
rmarkdown::word_document
?shiny::runApp
library(PROMIDAT.PREDICTIVO.SHINY)
